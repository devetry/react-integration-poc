{"version":3,"sources":["CubeWithControls/ThreeSceneRenderer.js","CubeWithControls/three-scenes/CubeScene.js","CubeWithControls/index.js","CubeWithControls/CubeWithControls.js","Editor/index.js","Editor/Editor.js","App.js","serviceWorker.js","index.js"],"names":["ThreeSceneRenderer","props","_createCanvas","canvas","document","createElement","setAttribute","height","width","Math","random","threeRootElement","appendChild","_destroyCanvas","removeChild","state","_draw","scene","update","setState","requestId","requestAnimationFrame","this","init","window","addEventListener","onWindowResize","prevProps","prevState","snapshot","cancelAnimationFrame","removeEventListener","ref","element","React","Component","CubeScene","depth","color","renderer","camera","THREE","geometry","material","mesh","add","antialias","setPixelRatio","devicePixelRatio","setSize","buildRenderer","position","z","buildCamera","rotation","x","y","render","CubeWithControls","useState","handleUpdate","prop","event","parseInt","target","value","type","onChange","Editor","setColor","component","Photoshop","on","hex","App","className","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.52224373.chunk.js","sourcesContent":["import React from 'react';\n\nclass ThreeSceneRenderer extends React.Component {\n\n  threeRootElement;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      requestId: null,\n      canvas: null,\n    }\n  }\n\n  componentDidMount() {\n    const canvas = this._createCanvas();\n    this.props.scene.init(canvas);\n\n    window.addEventListener('resize', this.props.scene.onWindowResize);\n\n    this.setState({ canvas }, this._draw);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.scene === this.props.scene) {\n      return;\n    }\n    cancelAnimationFrame(this.state.requestId);\n    this._destroyCanvas();\n\n    const canvas = this._createCanvas();\n    this.props.scene.init(canvas);\n\n    this.setState({ canvas }, this._draw);\n  }\n\n  componentWillUnmount() {\n    cancelAnimationFrame(this.state.requestId);\n    window.removeEventListener('resize', this.props.scene.onWindowResize);\n  }\n\n  render() {\n    return (\n      <div ref={element => this.threeRootElement = element} />\n    );\n  }\n\n  _createCanvas = () => {\n    const canvas = document.createElement('canvas');\n    canvas.setAttribute('style', `height: ${this.props.height}px;width: ${this.props.width}px;`);\n    canvas.setAttribute('height', this.props.height);\n    canvas.setAttribute('width', this.props.width);\n    canvas.setAttribute('random', Math.random());\n    this.threeRootElement.appendChild(canvas);\n\n    return canvas;\n  }\n\n  _destroyCanvas = () => {\n    this.threeRootElement.removeChild(this.state.canvas);\n  }\n\n  _draw = () => {\n    this.props.scene.update();\n\n    this.setState({\n      requestId: requestAnimationFrame(this._draw),\n    })\n  }\n}\n\nexport default ThreeSceneRenderer;","import * as THREE from 'three';\n\nconst buildScene = () => {\n  return new THREE.Scene();\n}\n\nconst buildRenderer = (canvas) => {\n    const renderer = new THREE.WebGLRenderer( { canvas, antialias: true } );\n    renderer.setPixelRatio( window.devicePixelRatio );\n    renderer.setSize( canvas.width, canvas.height, false );\n\n    return renderer;\n}\n\nconst buildCamera = (canvas) => {\n  const camera = new THREE.PerspectiveCamera( 70, canvas.width / canvas.height, 1, 1000 );\n  camera.position.z = 400;\n\n  return camera;\n}\n\nconst CubeScene = (height, width, depth, color) => {\n  const scene = buildScene();\n  let renderer, camera;\n\n  const init = (canvas) => {\n    renderer = buildRenderer(canvas);\n    camera = buildCamera(canvas);\n  };\n\n  const update = () => {\n    mesh.rotation.x += 0.005;\n    mesh.rotation.y += 0.01;\n\n    renderer.render( scene, camera );\n  };\n\n  // no-op\n  const onWindowResize = () => {};\n\n  const geometry = new THREE.BoxBufferGeometry( height, width, depth );\n  const material = new THREE.MeshBasicMaterial( { color } );\n\n  const mesh = new THREE.Mesh( geometry, material );\n\n  scene.add(mesh);\n\n  return { init, update, onWindowResize };\n};\n\nexport default CubeScene;","import CubeWithControls from './CubeWithControls';\n\nexport default CubeWithControls;","import React, { useState } from 'react';\n\nimport ThreeSceneRenderer from './ThreeSceneRenderer';\nimport CubeScene from './three-scenes/CubeScene'\n\nconst CubeWithControls = ({ color }) => {\n  const [{ height, width, depth }, setState] = useState({\n    height: 200,\n    width: 200,\n    depth: 200,\n  });\n  const handleUpdate = (prop) => {\n    return (event) => {\n      setState(state => ({ ...state, [prop]: parseInt(event.target.value, 10) }));\n    };\n  };\n\n  const scene = CubeScene(height, width, depth, color);\n\n  return (\n    <div>\n      <label>\n        Height\n        <input type=\"number\" value={`${height}`} onChange={handleUpdate('height')} />\n      </label>\n      <label>\n        Width\n        <input type=\"number\" value={`${width}`} onChange={handleUpdate('width')} />\n      </label>\n      <label>\n        Depth\n        <input type=\"number\" value={`${depth}`} onChange={handleUpdate('depth')} />\n      </label>\n      <ThreeSceneRenderer scene={scene} height={400} width={400} />\n    </div>\n  )\n}\n\nexport default CubeWithControls;","import Editor from './Editor';\n\nexport default Editor;","import React from 'react'\nimport { VueWrapper } from 'vuera'\nimport { Photoshop } from 'vue-color'\n\n\nconst Editor = ({ color, setColor }) => (\n  <div>\n    <div>\n      <VueWrapper\n        component={Photoshop}\n        value={color}\n        on={{\n          'input': (event) => { setColor(event.hex); },\n        }}\n      />\n    </div>\n  </div>\n);\n\nexport default Editor;","import React from 'react';\n\nimport CubeWithControls from './CubeWithControls';\nimport Editor from './Editor';\nimport './App.css';\n\nfunction App() {\n  const [color, setColor] = React.useState('#FF0000');\n\n  return (\n    <div className=\"App\">\n      <CubeWithControls color={color} />\n      <Editor color={color} setColor={setColor} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}